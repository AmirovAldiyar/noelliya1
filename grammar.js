/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(r) { 
              setCompVar("0", "input", {type: consts.TYPE_STRING, params: []})
              setVar("0", "input", {type: consts.TYPE_STRING, params: [], value: (history, scope) => {
                  return {type: consts.TYPE_STRING, value: prompt("")}
              }})
              let hasError = false
              let report = []
              for(let i = 0; i < r[0].length; i ++) {
                  report.push(r[0][i]([], "0"))
              }
              for(let i = 0; i < report.length; i ++) {
                  if(report[i] != undefined) {
                      console.log(report[i])
                      hasError = true
                  }
              }
              if (!hasError) {
                  let runtimes = []
                  for(let i = 0; i < r[1].length; i ++) {
                      let err = r[1][i]([], "0")
                      if (err != undefined) {
                          console.log("runtime error:", err)
                          break;
                      }
                  }
              }
           },
      peg$c1 = "if",
      peg$c2 = peg$literalExpectation("if", false),
      peg$c3 = "(",
      peg$c4 = peg$literalExpectation("(", false),
      peg$c5 = ")",
      peg$c6 = peg$literalExpectation(")", false),
      peg$c7 = function(expr, block) {return [ifcheck(location(), expr, block), ifState(location(), expr, block)]},
      peg$c8 = "else",
      peg$c9 = peg$literalExpectation("else", false),
      peg$c10 = function(expr, block1, block2) { return [ifElsecheck(location(), expr, block1, block2), ifElseState(location(), expr, block1, block2)]},
      peg$c11 = ";",
      peg$c12 = peg$literalExpectation(";", false),
      peg$c13 = function(ident) {
              let locat = location(); 
              return [(history, scope) => {
                  let func = getCompVar(history, scope, ident)
                  if (func == undefined) {
                      return `${locat.start.line}:${locat.start.column} function ${ident} was not declared in the scope`
                  }
                  if (func.params == undefined) {
                      return `${locat.start.line}:${locat.start.column} ${ident} is not a function`
                  }
                  return undefined;
              }, (history, scope) => {
                  let func = getVar(history, scope, ident)
                  blockStack.push("func")
                  let res = func.value(history, scope, [])
                  blockStack.pop()
                  return res
              }]
          },
      peg$c14 = function(ident, args) { let locat = location(); 
              return [(history, scope) => {
                  let func = getCompVar(history, scope, ident)
                  if (func == undefined) {
                      return `${locat.start.line}:${locat.start.column} function ${ident} was not declared in the scope`
                  }
                  if (func.params == undefined) {
                      return `${locat.start.line}:${locat.start.column} ${ident} is not a function`
                  }
                  if (args.length != func.params.length) {
                      return `${locat.start.line}:${locat.start.column} argument number expected ${func.params.length} got ${args.length}`
                  }
                  for (let i = 0; i < func.params.length; i++) {
                      let err = args[i][0](history, scope)
                      if (err[1] != undefined) {
                          return err[1]
                      }
                      if (err[0] != func.params[i][1]) {
                          return `${locat.start.line}:${locat.start.column} argument ${i} should be type ${func.params[i][1]}, got ${err[0]}`
                      }
                  }
                  return undefined;
              }, (history, scope) => {
                  let func = getVar(history, scope, ident)
                  let argList = []
                  for (let i = 0; i < args.length; i ++) {
                      argList.push([func.params[i][0], func.params[i][1], args[i][1](history, scope).value])
                  }
                  blockStack.push("func")
                  let res = func.value(history, scope, argList)
                  blockStack.pop()
                  return res
              }]
          },
      peg$c15 = function(stmt, stmtlst) { return [[stmt[0], ...stmtlst[0]], [stmt[1], ...stmtlst[1]]]; },
      peg$c16 = function(stmt) { return [[stmt[0]], [stmt[1]]]; },
      peg$c17 = function(decl) { return decl; },
      peg$c18 = function(prnt) { return prnt; },
      peg$c19 = function(assign) { return assign; },
      peg$c20 = function(ifstate) {return ifstate; },
      peg$c21 = function(fd) { return fd; },
      peg$c22 = function(fc) {return fc;},
      peg$c23 = function(r) {return r;},
      peg$c24 = "var",
      peg$c25 = peg$literalExpectation("var", false),
      peg$c26 = ":=",
      peg$c27 = peg$literalExpectation(":=", false),
      peg$c28 = function(ident, type, expr) { return [declareCheck(location(), ident, expr, type), declare(location(), ident, expr)]; },
      peg$c29 = "=",
      peg$c30 = peg$literalExpectation("=", false),
      peg$c31 = function(ident, value) { return [assignmentValueCheck(location(), ident, value), assignmentValue(location(), ident, value)] },
      peg$c32 = function(ident1, ident2) { return [assignmentIdentCheck(location(), ident1, ident2), assignmentIdent(location(), ident1, ident2)]},
      peg$c33 = "{",
      peg$c34 = peg$literalExpectation("{", false),
      peg$c35 = "}",
      peg$c36 = peg$literalExpectation("}", false),
      peg$c37 = function(r) {
              return [(history, scope, args=[]) => {
                  let newHistory = [...history, scope]
                  let newScope = utils.generateId()
                  for(let i = 0; i < args.length; i ++) {
                      setCompVar(newScope, args[i][0], {type: args[i][1]})
                  }
                  let report = []
                  for(let i = 0; i < r[0].length; i ++) {
                      let err = r[0][i](newHistory, newScope)
                      if (err != undefined){
                          report.push(err)
                      }
                  }
                  if(report.length != 0) {
                      return report.join("\n")
                  }
                  return undefined
              }, (history, scope, args=[]) => {
                  let newHistory = [...history, scope]
                  let newScope = utils.generateId()
                  for(let i = 0; i < args.length; i ++) {
                      setVar(newScope, args[i][0], {type: args[i][1], value: args[i][2]})
                  }
                  for(let i = 0; i < r[1].length; i ++) {
                      let err = r[1][i](newHistory, newScope)
                      if (err != undefined) {
                          return err
                      }
                      if (returned[0]) {
                          if (blockStack[blockStack.length-1] == "func"){
                              returned[0] = false
                              return returned[1]
                          }
                          break
                      }
                  }
                  return undefined
              }
              ]
          },
      peg$c38 = "func",
      peg$c39 = peg$literalExpectation("func", false),
      peg$c40 = function(ident, params, type, block) {
              return [(history, scope) => {
                  lastType = type
                  setCompVar(scope, ident, {params: params, type: type})
                  blockStack.push("func")
                  let check = block[0](history, scope, params)
                  blockStack.pop()
                  if (check != undefined) {
                      return check
                  }
                  return 
              }, (history, scope) => {
                  setVar(scope, ident, {params: params, type: type, value: block[1]})
                  return undefined
              }]
          },
      peg$c41 = function(ident, params, block) {
              return [(history, scope) => {
                  setCompVar(scope, ident, {params: params, type: consts.TYPE_UNDEFINED})
                  let check = block[0](history, scope, params)
                  if (check != undefined) {
                      return check
                  }
                  return 
              }, (history, scope) => {
                  setVar(scope, ident, {params: params, type: consts.TYPE_UNDEFINED, value: block[1]})
                  return undefined
              }]
          },
      peg$c42 = /^[a-z]/,
      peg$c43 = peg$classExpectation([["a", "z"]], false, false),
      peg$c44 = /^[a-z0-9]/,
      peg$c45 = peg$classExpectation([["a", "z"], ["0", "9"]], false, false),
      peg$c46 = function(first, others) { return utils.makeIdent(first, others); },
      peg$c47 = "print",
      peg$c48 = peg$literalExpectation("print", false),
      peg$c49 = function(exp) { return [printCheck(location(), exp), print(location(), exp)]; },
      peg$c50 = "int",
      peg$c51 = peg$literalExpectation("int", false),
      peg$c52 = function() { return consts.TYPE_INT; },
      peg$c53 = "string",
      peg$c54 = peg$literalExpectation("string", false),
      peg$c55 = function() { return consts.TYPE_STRING; },
      peg$c56 = "float",
      peg$c57 = peg$literalExpectation("float", false),
      peg$c58 = function() { return consts.TYPE_FLOAT; },
      peg$c59 = "true",
      peg$c60 = peg$literalExpectation("true", false),
      peg$c61 = function() { return {
              value: true,
              type: consts.TYPE_BOOL,
          }},
      peg$c62 = "false",
      peg$c63 = peg$literalExpectation("false", false),
      peg$c64 = function() {return {
              value: false,
              type: consts.TYPE_BOOL,
          }
          },
      peg$c65 = /^[0-9]/,
      peg$c66 = peg$classExpectation([["0", "9"]], false, false),
      peg$c67 = function(digits) { return utils.makeInt(digits); },
      peg$c68 = "return",
      peg$c69 = peg$literalExpectation("return", false),
      peg$c70 = function() { 
              return [(history, scope) => {
                  return undefined
              }, 
              (history, scope) => {
                  returned = [true, undefined]
                  return undefined
              }]
          },
      peg$c71 = function(exp) { let locat = location();
              return [(history, scope) => {
                  if(lastType == undefined) {
                      return `${location.start.line}:${location.start.column} function do not return anything`;
                  }
                  let val = exp[0](history,scope)
                  if(val[1] != undefined) {
                      return val[1]
                  }
                  if (lastType != val[0]) {
                      return `${locat.start.line}:${locat.start.column} return type should be ${lastType}, got ${val[0]}`;
                  }
                  return undefined
              }, 
              (history, scope) => {
                  returned = [true, exp[1](history, scope)]
                  return undefined
              }]
          },
      peg$c72 = ".",
      peg$c73 = peg$literalExpectation(".", false),
      peg$c74 = function(intpart, floatpart) {  return utils.makeFloat(intpart, floatpart); },
      peg$c75 = "\"",
      peg$c76 = peg$literalExpectation("\"", false),
      peg$c77 = /^[0-9a-zA-Z ]/,
      peg$c78 = peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], " "], false, false),
      peg$c79 = function(str) { return utils.makeString(str); },
      peg$c80 = function(pl) { return pl; },
      peg$c81 = function() { return []; },
      peg$c82 = function(parameter) { return [parameter]; },
      peg$c83 = ",",
      peg$c84 = peg$literalExpectation(",", false),
      peg$c85 = function(param, params) { return [...params, param]; },
      peg$c86 = function(ident, type) { return [ident, type]; },
      peg$c87 = function(e, a) { return [...a, e]},
      peg$c88 = function(expression) { return [expression] },
      peg$c89 = function(value) { return [(history, scope) => [value.type, undefined], (history, scope) => value] },
      peg$c90 = function(ident) { let loc = location(); return [(history, scope) => operandCheckIdent(history, scope, loc, ident), (history, scope) => {return getVar(history, scope, ident)}] },
      peg$c91 = function(oper, args) { let locat = location();
           return [(history, scope) => {
                  let part = oper[0](history, scope)
                  if (part[1] != undefined) {
                      return [consts.TYPE_UNDEFINED, part[1]]
                  }
                  let check = part[2]
                  if (check.params == undefined) {
                      return  [consts.TYPE_UNDEFINED, `${locat.start.line}:${locat.start.column} given expression is not callable`]
                  }
                  if (args.length != check.params.length) {
                      return [consts.TYPE_UNDEFINED, `${locat.start.line}:${locat.start.column} argument number expected ${check.params.length} got ${args.length}`]
                  }
                  for (let i = 0; i < check.params.length; i++) {
                      let err = args[i][0](history, scope)
                      if (err[1] != undefined) {
                          return [consts.TYPE_UNDEFINED, err[1]]
                      }
                      if (err[0] != check.params[i][1]) {
                          return [consts.TYPE_UNDEFINED, `${locat.start.line}:${locat.start.column} argument ${i} should be type ${check.params[i][1]}, got ${err[0]}`]
                      }
                  }
                  return [check.type, undefined]
              }, (history, scope) => {
                  let value = oper[1](history, scope)
                  let argList = []
                  for (let i = 0; i < args.length; i ++) {
                      argList.push([value.params[i][0], value.params[i][1], args[i][1](history, scope).value])
                  }
                  blockStack.push("func")
                  let res = value.value(history, scope, argList)
                  blockStack.pop()
                  return res
              }]},
      peg$c92 = function(oper) { let locat = location();
           return [(history, scope) => {
                  let part = oper[0](history, scope)
                  if (part[1] != undefined) {
                      return [consts.TYPE_UNDEFINED, part[1]]
                  }
                  let check = part[2]
                  if (check.params == undefined) {
                      return  [consts.TYPE_UNDEFINED, `${locat.start.line}:${locat.start.column} given expression is not callable`]
                  }
                  return [check.type, undefined]
              }, (history, scope) => {
                  let value = oper[1](history, scope)
                  blockStack.push("func")
                  let res = value.value(history, scope, [])
                  blockStack.pop()
                  return res
              }]},
      peg$c93 = function(oper) { return oper },
      peg$c94 = "[",
      peg$c95 = peg$literalExpectation("[", false),
      peg$c96 = "]",
      peg$c97 = peg$literalExpectation("]", false),
      peg$c98 = function(value1, op, value2) { return [(history, scope) => expCheckTwoWrap(binaryCheck, history, scope, location(), op, value1, value2), (history, scope) => expTwoWrap(binary, history, scope, location(), op, value1, value2)] },
      peg$c99 = function(value) {return value},
      peg$c100 = function(value1, op, value2) { return [(history, scope) => expCheckTwoWrap(addCheck, history, scope, location(), op, value1, value2), (history, scope) => expTwoWrap(add, history, scope, location(), op, value1, value2)] },
      peg$c101 = function(value) { return value },
      peg$c102 = function(value1, op, value2) { return [(history, scope) => expCheckTwoWrap(multiCheck, history, scope, location(), op, value1, value2), (history, scope) => expTwoWrap(multi, history, scope, location(), op, value1, value2)] },
      peg$c103 = function(op, value) { return [(history, scope) => expCheckOneWrap(unaryCheck, history, scope, location(), op, value), (history, scope) => expOneWrap(unary, history, scope, location(), op, value)]},
      peg$c104 = "||",
      peg$c105 = peg$literalExpectation("||", false),
      peg$c106 = "&&",
      peg$c107 = peg$literalExpectation("&&", false),
      peg$c108 = "==",
      peg$c109 = peg$literalExpectation("==", false),
      peg$c110 = "!=",
      peg$c111 = peg$literalExpectation("!=", false),
      peg$c112 = "<",
      peg$c113 = peg$literalExpectation("<", false),
      peg$c114 = "<=",
      peg$c115 = peg$literalExpectation("<=", false),
      peg$c116 = ">",
      peg$c117 = peg$literalExpectation(">", false),
      peg$c118 = ">=",
      peg$c119 = peg$literalExpectation(">=", false),
      peg$c120 = "+",
      peg$c121 = peg$literalExpectation("+", false),
      peg$c122 = "-",
      peg$c123 = peg$literalExpectation("-", false),
      peg$c124 = "*",
      peg$c125 = peg$literalExpectation("*", false),
      peg$c126 = "/",
      peg$c127 = peg$literalExpectation("/", false),
      peg$c128 = "!",
      peg$c129 = peg$literalExpectation("!", false),
      peg$c130 = /^[ \t\r\n]/,
      peg$c131 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprogram();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprogram() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestatementsList();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseifstatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpression();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c5;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseblock();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c7(s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c5;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseblock();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c8) {
                            s11 = peg$c8;
                            peg$currPos += 4;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseblock();
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c10(s5, s9, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefunccall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s7 = peg$c11;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c13(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsearglist();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c5;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c11;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c14(s1, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestatementsList() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsestatement();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestatementsList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c15(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsestatement();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedeclaration();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseprint();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseassignment();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s3 = peg$c11;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseifstatement();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsefuncdeclare();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsefunccall();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c22(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsereturnstatement();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c23(s1);
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseident();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetype();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c26) {
                  s7 = peg$c26;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c27); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseexpression();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c28(s3, s5, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c29;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevalue();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseident();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c32(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseblock() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestatementsList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c37(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefuncdeclare() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseident();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseparameters();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetype();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseblock();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c40(s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseident();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseparameters();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseblock();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c41(s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseident() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c42.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c44.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c46(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprint() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetype() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c52();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c53) {
        s1 = peg$c53;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c56) {
          s1 = peg$c56;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c57); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0;

    s0 = peg$parsefloatliteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseintliteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestringliteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseboolliteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunctionliteral();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseboolliteral() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c61();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseintliteral() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c65.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c65.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c67(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsereturnstatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c11;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c71(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefloatliteral() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c65.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c65.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c72;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c65.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c65.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c66); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c74(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestringliteral() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c75;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c77.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c77.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c79(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionliteral() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseparameters();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetype();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseblock();
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesignature() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseparameters();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetype();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetype();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparameters() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseparameterlist();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c80(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c81();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseparameterlist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseparameter();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c82(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseparameter();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c83;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseparameterlist();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c85(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseparameter() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetype();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c86(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentifierlist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseident();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c83;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifierlist();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsearglist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c83;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearglist();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseoperand() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsevalue();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c89(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseident();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c90(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseprimaryexpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearglist();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c5;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c91(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseoperand();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c5;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c92(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoperand();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c93(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseindex() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c94;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c96;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseaddexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebinary_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpression();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseaddexpr();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c99(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseaddexpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemulexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseadd_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseaddexpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c100(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemulexpr();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c101(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsemulexpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseunaryexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemul_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemulexpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c102(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseunaryexpr();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c101(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseunaryexpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseunary_op();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseunaryexpr();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c103(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c5;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c99(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseprimaryexpr();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c101(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsebinary_op() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c104) {
      s0 = peg$c104;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c105); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c106) {
        s0 = peg$c106;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parserel_op();
      }
    }

    return s0;
  }

  function peg$parserel_op() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c108) {
      s0 = peg$c108;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c110) {
        s0 = peg$c110;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s0 = peg$c112;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c114) {
            s0 = peg$c114;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c115); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s0 = peg$c116;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c117); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c118) {
                s0 = peg$c118;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c119); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseadd_op() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c120;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c122;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
    }

    return s0;
  }

  function peg$parsemul_op() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c124;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c126;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
    }

    return s0;
  }

  function peg$parseunary_op() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c120;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c122;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s0 = peg$c128;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$c130.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c130.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    if (peg$c130.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c130.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }



      const ps = require('prompt-sync')
      const prompt = ps()
      const consts = require("./const")
      let utils = require("./utils")
      var vars = new Map()
      var compVars = new Map()
      let funcs = []
      let scopeHistory = []
      let tmpScope = ""
      let blockStack = []
      let returned = [false, undefined]
      let lastType = undefined
      
      function declarationValue(ctx, ident, type, value) {
          if(type != value.type) {
              console.error("something went wrong");
          }
          
      }

      function getCompVar(history, scope, ident) {
          let key = scope+"$"+ident;
          let val = compVars.get(key)
          if(val != undefined) {
              return val
          }
          for(let i = 0; i < history.length; i ++) {
              let key = history[i]+"$"+ident;
              let val = compVars.get(key)
              if(val != undefined) {
                  return val
              }
          }
          return undefined
      }

      function setCompVar(scope, ident, value) {
          compVars.set(scope+'$'+ident, value)
      }

      function getVar(history, scope, ident) {
          let key = scope+"$"+ident;
          let val = vars.get(key)
          if(val != undefined) {
              return val
          }
          for(let i = 0; i < history.length; i ++) {
              let key = history[i]+"$"+ident;
              let val = vars.get(key)
              if(val != undefined) {
                  return val
              }
          }
          return undefined
      }

      function setVar(scope, ident, value) {
          vars.set(scope+'$'+ident, value)
      }

      function declareIdentCheck(location, ident1, ident2, type) {
          return (history, scope) => {
              if(compVars.get(scope+'$'+ident1) != undefined) {
                  return `${location.start.line}:${location.start.column} variable ${ident1} is already defined`;
              }
              let val = getCompVar(history, scope, ident2);
              if(val == undefined) {
                  return `${location.start.line}:${location.start.column} variable ${ident2} not defined`;
              } 
              if (val.type != type) {
                  return `${location.start.line}:${location.start.column} type ${val.type} is not assignable to type ${type}`
              }
              setCompVar(scope, ident1, val);
              return undefined; 
          }
      }

      function declareIdent(location, ident1, ident2) {
          return (history, scope) => {
              let val = getVar(ident2);
              if(val == undefined) {
                  return `${location.start.line}:${location.start.column} variable not defined ${ident2}`;
              }
              setVar(scope, ident1, val);
              return undefined; 
          }
      }

      
      function declareCheck(location, ident1, expr, type) {
          return (history, scope) => {
              if(compVars.get(scope+'$'+ident1) != undefined) {
                  return `${location.start.line}:${location.start.column} variable ${ident1} is already defined`;
              }
              let check = expr[0](history, scope)
              if (check[1] != undefined) {
                  return check[1]
              }
              if (check[0] != type) {
                  return `${location.start.line}:${location.start.column} type ${check[0]} is not assignable to type ${type}`
              }
              let value = {type: check[0]}
              setCompVar(scope, ident1, value);
              return undefined; 
          }
      }

      function declare(location, ident1, expr) {
          return (history, scope) => {
              let value = expr[1](history, scope)
              setVar(scope, ident1, value);
              return undefined;
          }
      }

      function printCheck(location, exp) {
          return (history, scope) => {
              let check = exp[0](history, scope)
              if(check[1] != undefined) {
                  return check[1]
              }
              return undefined
          }
      }

      function print(location, exp) {
          return (history, scope) => {
              let val = exp[1](history, scope)
              if(val == undefined) {
                  return `${location.start.line}:${location.start.column} variable ${ident} is not defined`
              }
              console.log(val.value)
              return undefined
          }
      }

      function wrapper(history, scope, func) {
          return () => {
              func(history, scope)
          }
      }

      function assignmentIdentCheck(location, ident1, ident2) {
          return (history, scope) => {
              let var1 = getCompVar(history, scope, ident1)
              if(var1 == undefined) {
                  return `${location.start.line}:${location.start.column} varaible ${ident1} is not defined`
              }
              let var2 = getCompVar(history, scope, ident2)
              if(var2 == undefined) {
                  return `${location.start.line}:${location.start.column} varaible ${ident2} is not defined`
              }
              if(var1.type != var2.type) {
                  return `${location.start.line}:${location.start.column} type ${var2.type} is assignable to type ${var1.type}`
              }
              return undefined
          }
      }

      function assignmentIdent(location, ident1, ident2) {
          return (history, scope) => {
              setVar(scope, ident1, getVar(history, scope, ident2))
              return undefined
          }
      }
      
      function assignmentValueCheck(location, ident1, value) {
          return (history, scope) => {
              let var1 = getCompVar(history, scope, ident1)
              if(var1 == undefined) {
                  return `${location.start.line}:${location.start.column} varaible ${ident1} is not defined`
              }
              if(var1.type != value.type) {
                  return `${location.start.line}:${location.start.column} type ${value.type} is assignable to type ${var1.type}`
              }
              return undefined
          }
      }

      function assignmentValue(location, ident1, value) {
          return (history, scope) => {
              setVar(scope, ident1, value)
              return undefined
          }
      }

      function unaryCheck(location, op, value) {
          switch (op) {
              case "+":
                  if (value.type == consts.TYPE_INT || value.type == consts.TYPE_FLOAT) {
                      return [value.type, undefined]
                  }
                  return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply unary operator "${op}" to type ${value.type}`]
                  break;
              case "-":
                  if (value.type == consts.TYPE_INT || value.type == consts.TYPE_FLOAT) {
                      return [value.type, undefined]
                  }
                  return  [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply unary operator "${op}" to type ${value.type}`]
                  break;
              case "!":
                  if (value.type == consts.TYPE_BOOL) {
                      return [consts.TYPE_BOOL, undefined]
                  }
                  return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply unary operator "${op}" to type ${value.type}`]
                  break;
              default:
                  break;
          }
      }

      function unary(location, op, value) {
          switch (op) {
              case "+":
                  return value
                  break;
              case "-":
                  console.log(value.value)
                  value.value = -value.value
                  return value
                  break;
              case "!":
                  value.value = !value.value
                  return value
                  break;
              default:
                  break;
          }
      }

      function binaryCheck(location, op, value1, value2) {
          switch (op) {
              case "&&":
              case "||":
                  if (value1.type == consts.TYPE_BOOL && value2.type == consts.TYPE_BOOL) {
                      return [consts.TYPE_BOOL, undefined]
                  }
                  return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply operator "${op}" to type ${value1.type} or type ${value2.type}`]
                  break;
              case "!=":
              case "==":
                  if (value1.type == consts.TYPE_BOOL && value2.type == consts.TYPE_BOOL) {
                      return [consts.TYPE_BOOL, undefined]
                  }
                  if ((value1.type == consts.TYPE_INT || value1.type === consts.TYPE_FLOAT) && (value2.type == consts.TYPE_INT || value2.type == consts.TYPE_FLOAT)) {
                      return [consts.TYPE_BOOL, undefined]
                  }
                  if (value1.type == consts.TYPE_STRING && value2.type == consts.TYPE_STRING) {
                      return [consts.TYPE_BOOL, undefined]
                  }
                  return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply operator "${op}" to type ${value1.type} and type ${value2.type}`]
                  break;
              case "<":
              case "<=":
              case ">":
              case ">=":
                  if ((value1.type == consts.TYPE_INT || value1.type === consts.TYPE_FLOAT) && (value2.type == consts.TYPE_INT || value2.type == consts.TYPE_FLOAT)) {
                      let returnType = (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) ? consts.TYPE_FLOAT : consts.TYPE_INT
                      return [returnType, undefined]
                  }
                  return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply operator "${op}" to type ${value1.type} and type ${value2.type}`]
                  break;
              default:
                  break;
          }
      }

      function binary(location, op, value1, value2) {
          let res
          switch (op) {
              case "&&":
                  res = { value: value1.value && value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case "||":
                  res = { value: value1.value || value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case "!=":
                  res = { value: value1.value != value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case "==":
                  res = { value: value1.value == value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case "<":
                  res = { value: value1.value < value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case "<=":
                  res = { value: value1.value <= value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case ">":
                  res = { value: value1.value > value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              case ">=":
                  res = { value: value1.value >= value2.value, type: consts.TYPE_BOOL }
                  return res
                  break;
              default:
                  break;
          }
      }

      function multiCheck(location, op, value1, value2) {
          if ((value1.type == consts.TYPE_INT || value1.type === consts.TYPE_FLOAT) && (value2.type == consts.TYPE_INT || value2.type == consts.TYPE_FLOAT)) {
              let returnType = (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) ? consts.TYPE_FLOAT : consts.TYPE_INT
              return [returnType, undefined]
          }
          return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply operator "${op}" to type ${value1.type} or type ${value2.type}`]     
      }

      function multi(location, op, value1, value2) {
          switch (op) {
              case "*":
                  let res = { value: value1.value * value2.value, type: consts.TYPE_INT}
                  if (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) {
                      res.type = consts.TYPE_FLOAT
                  }
                  return res
                  break;
              case "/":
                  res = { value: value1.value / value2.value, type: consts.TYPE_INT}
                  if (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) {
                      res.type = consts.TYPE_FLOAT
                  }
                  return res
                  break;
          
              default:
                  break;
          }
      }

      function addCheck(location, op, value1, value2) {
          if ((value1.type == consts.TYPE_INT || value1.type === consts.TYPE_FLOAT) && (value2.type == consts.TYPE_INT || value2.type == consts.TYPE_FLOAT)) {
              let returnType = (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) ? consts.TYPE_FLOAT : consts.TYPE_INT
              return [returnType, undefined]
          }
          return [consts.TYPE_UNDEFINED, `${location.start.line}:${location.start.column} cannot apply operator "${op}" to type ${value1.type} or type ${value2.type}`]     
      }

      function add(location, op, value1, value2) {
          let res
          switch (op) {
              case "+":
                  res = { value: value1.value + value2.value, type: consts.TYPE_INT}
                  if (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) {
                      res.type = consts.TYPE_FLOAT
                  }
                  return res
                  break;
              case "-":
                  res = { value: value1.value - value2.value, type: consts.TYPE_INT}
                  if (value1.type == consts.TYPE_FLOAT || value2.type == consts.TYPE_FLOAT) {
                      res.type = consts.TYPE_FLOAT
                  }
                  return res
                  break;
          
              default:
                  break;
          }
      }

      function expCheckTwoWrap(func, history, scope, location, op, value1, value2) {
          let res1 = value1[0](history, scope)
          let type1 = res1[0]
          let err1 = res1[1]
          if(err1 != undefined) {
              return [consts.TYPE_UNDEFINED, err1]
          }
          let res2 = value2[0](history, scope)
          let type2 = res2[0]
          let err2 = res2[1]
          if(err2 != undefined) {
              return [consts.TYPE_UNDEFINED, err2]
          }
          return func(location, op, {type: type1}, {type: type2})
      }
      function expCheckOneWrap(func, history, scope, location, op, value1) {
          let res1 = value1[0](history, scope)
          let type1 = res1[0]
          let err1 = res1[1]
          if(err1 != undefined) {
              return [consts.TYPE_UNDEFINED, err1]
          }
          return func(location, op, {type: type1})
      }
      function expTwoWrap(func, history, scope, location, op, value1, value2) {
          let var1 = value1[1](history, scope)
          let var2 = value2[1](history, scope)
          return func(location, op, var1, var2)
      }
      function expOneWrap(func, history, scope, location, op, value) {
          let var1 = value[1](history, scope)
          return func(location, op, var1)
      }
      function operandCheckIdent(history, scope, location, ident) {
          let variable = getCompVar(history, scope, ident)
          if (variable == undefined) {
              return [undefined, `${location.start.line}:${location.start.column} variable ${ident} is not declared in the scope`]
          }
          let type = variable.type
          if (type == undefined) {
              return [undefined, `${location.start.line}:${location.start.column} variable ${ident} is not declared in the scope`]
          }
          return [type, undefined, variable]
      }
      function ifcheck(location, expr, block) {
          return (history, scope) => {
              let val = expr[0](history, scope)
              if (val[1] != undefined) {
                  return val[1]
              }
              if (val[0] != consts.TYPE_BOOL) {
                  return `${location.start.line}:${location.start.column} expression should evaluate to boolean`
              }
              blockStack.push("block")
              let blockCheck = block[0](history, scope)
              blockStack.pop()
              if(blockCheck != undefined) {
                  return blockCheck
              }
              return undefined
          }
      }
      function ifElsecheck(location, expr, block, block2) {
          return (history, scope) => {
              let val = expr[0](history, scope)
              if (val[1] != undefined) {
                  return val[1]
              }
              if (val[0] != consts.TYPE_BOOL) {
                  return `${location.start.line}:${location.start.column} expression should evaluate to boolean`
              }
              let err = ""
              blockStack.push("block")
              let blockCheck = block[0](history, scope)
              blockStack.pop()
              if(blockCheck != undefined) {
                  err = err + blockCheck
              }
              blockStack.push("block")
              let blockCheck2 = block2[0](history, scope)
              blockStack.pop()
              if(blockCheck2 != undefined) {
                  err = err + "\n" + blockCheck2
              }
              if (err != "") {
                  return err
              }
              return undefined
          }
      }
      function ifState(location, expr, block) {
          return (history,scope) => {
              let val = expr[1](history, scope)
              if (val.value == true) {
                  blockStack.push("block")
                  let res = block[1](history, scope)
                  blockStack.pop()
                  return res
              }
              return undefined
          }
      }
      function ifElseState(location, expr, block, block2) {
          return (history,scope) => {
              let val = expr[1](history, scope)
              if (val.value == true) {
                  blockStack.push("block")
                  let res = block[1](history, scope)
                  blockStack.pop()
                  return res
              }
              blockStack.push("block")
              let res = block2[1](history, scope)
              blockStack.pop()
              return res
          }
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
